/*! \mainpage Coupled Cells Project - A Brief Description.
\section intro Introduction
This is a Intrduction section with some amount of text. 
\subsection physio Physiology
This code is used to simulate a coupled arterial cells, Endothelial cells (ECs) and Smooth muscle cells (SMCs) constituting the arterial wall. 
There is a one layer of each type of cell, the EC layer being the inner and the outer layer, as shown in figure 1. 
\image html Figure1.jpg Figure 1:<td> Figure show the computational representation of an arterial segment.</td>

\subsection Code_Description Description of Dataflow
main.cpp is the file where it all begins. This expects a configuration file whose name is forwarded by the command line argument -f, while invoking the executable. The format of the configuration file is as follows</th><td>
- The file is an output of the SurfaceMeshGenerator code that uses Dbihar function to generate meshes representing the geometry proposed by an input centerline. 
	- First line of this file is an integer representing the total number of subdomain included in the geometry.
	- Each end of line is delimited by a semicolon ";".
	- Each row of configuration.config file is a descriptor of a subdomain.
	- Each column element is separated by a comma ",".
	- The columns elements of the configuration.config file are integer values encode the information as tabulated in the tables 1 through 5.
	- There are three type of indicies contained in the configuration file that holds the positional information of a subdomain:
		-# Branch index
		-# Branch local sudomain index
		-# Global subdomain index
	  For clarity in description, the following will apply for the discussion of the table 1.
	  		- Branch		= A branch is each segement of the centerline whose endpoints consist of either a terminal end or a bifurcation point.
	  		- ith Subdomain		= The subdomain of which the calling MPI-Process is a member of.
	  		- Parent Subdomain	= The subdomain that directly preceeds the ith Subdomain.
	  		- Left child subdomain	= In the case of a bifurcation the 1st subdomain of the left daughter branch is referred here. 
	  		- Right child subdomain = In the case of a bifurcation the 1st subdomain of the right daughter branch is referred here.

	<TABLE>
	<CAPTION>Table 1: These elements define the topology of a of ith subdomain.</CAPTION>
		<tr>
		<th>Element 1</th>
		<td>Key_val or global index of the subdomain</td>
		</tr>
	
		<tr>
		<th>Element 2</th>
		<td>Subdomain Type (2 possibilities and their values) 
			1. Straight Segment (STRSEG)
			2. Bifurcation(BIF)</td>
		</tr>
	
		<tr>
		<th>Element 3	</th>
		<td>Axial extent of MPI-tasks of current key_val (P Processors)</td>
		</tr>

		<tr>
		<th>Element 4</th>
		<td>Circumferential extent of MPI-tasks of current key_val (2Q Processors)</td>
		</tr>

	</TABLE>
		
	<TABLE>	
		<CAPTION>Table 2: These 3 elements give the positional description of the parnet subdomain of the ith Subdomain.</CAPTION>
		<tr>
		<th>Element 5	</th>
		<td> Branch index of the parent subdomain.</td> 
		</tr>
	
		<tr>
		<th>Element 6	</th>
		<td>Local subdomain index (in its branch) of the parent subdomain.</td>
		</tr>
	
		<tr>
		<th>Element 7	</th>
		<td>Global subdomain index of the parent subdomain.</td>
		</tr>
	</TABLE>
	
	<TABLE>
		<CAPTION>Table 3: These 3 elements give the positional description of the Left child subdomain of the ith Subdomain.</CAPTION>
		<tr>	
		<th>Element 8	</th>
		<td>Branch index of the left child subdomain.</td>
		</tr>
	
		<tr>
		<th>Element 9	</th>
		<td>Local subdomain index (in its branch) of the left child subdomain.</td>
		</tr>
	
		<tr>
		<th>Element 10	</th>
		<td>Global subdomain index of the left child subdomain.</td>
		</tr>
	
	</TABLE>

	<TABLE>
		<CAPTION>Table 4: These 3 elements give the positional description of the Right child subdomain of the ith Subdomain.</CAPTION>
		<tr>
		<th>Element 11	</th>
		<td>Branch index of the right child subdomain.</td>
		</tr>
	
		<tr>
		<th>Element 12	</th>
		<td>Local subdomain index (in its branch) of the right child subdomain.</td>
		</tr>
	
		<tr>
		<th>Element 13	</th>
		<td>Global subdomain index of the Right child subdomain.</td>
		</tr>
	</TABLE>

	<TABLE>
		<CAPTION>Table 5: These elements describe how each give MPI-Process is to be packed with ECs and SMCs.</CAPTION>
		<tr>
		<th>Element 14	</th>
		<td>Requested number of ECs per mesh element in the subdomain</td>
		</tr>
	
		<tr>
		<th>Element 15	</th>
		<td>Requested number of SMCs per mesh element in the subdomain</td>
		</tr>
	
		<tr>	
		<th>Element 16	</th>
		<td>My own branch index</td>
		</tr>
		
		<tr>
		<th>Element 17	</th>
		<td>My own local subdomain index of the branch I belong to</td>
		</tr>
	
		<tr>
		<th>Element 18-20</th>
		<td>Number of points to be read from each type of grid, i.e. Processor Mesh, SMC Mesh and EC Mesh respectively, for my subdomain</td>
		</tr>
		
		<tr>
		<th>Element 21-23</th>
		<td>Number of cells to be read from each type of grid, i.e. Processor Mesh, SMC Mesh and EC Mesh respectively, for my subdomain. The last entry i.e. element 23 denotes bot number of EC quad and EC Centroids to be read</td>
		</tr>

	</TABLE>
Here is an example configuration file and depiction of the geometry it is encoding.

Configuration file:

<CODE>
14;\n
 0, 0, 4, 12,-1,-1,-1, 0, 1, 1,-1,-1,-1, 4, 4, 0, 0,65,12720,5040,48,9984,3840;\n
 1, 0, 4, 12, 0, 0, 0, 0, 2, 2,-1,-1,-1, 4, 4, 0, 1,65,12720,5040,48,9984,3840;\n
 2, 0, 4, 12, 0, 1, 1, 0, 3, 3,-1,-1,-1, 4, 4, 0, 2,65,12720,5040,48,9984,3840;\n
 3, 1, 4, 12, 0, 2, 2, 2, 1, 7, 1, 1, 4, 4, 4, 0, 3,65,12720,5040,48,9984,3840;\n
 4, 0, 4, 12, 1, 0, 3, 1, 2, 5,-1,-1,-1, 4, 4, 1, 1,65,12720,5040,48,9984,3840;\n
 5, 0, 4, 12, 1, 1, 4, 1, 3, 6,-1,-1,-1, 4, 4, 1, 2,65,12720,5040,48,9984,3840;\n
 6, 0, 4, 12, 1, 2, 5,-1,-1,-1,-1,-1,-1, 4, 4, 1, 3,65,12720,5040,48,9984,3840;\n
 7, 0, 4, 12, 2, 0, 3, 2, 2, 8,-1,-1,-1, 4, 4, 2, 1,65,12720,5040,48,9984,3840;\n
 8, 0, 4, 12, 2, 1, 7, 2, 3, 9,-1,-1,-1, 4, 4, 2, 2,65,12720,5040,48,9984,3840;\n
 9, 1, 4, 12, 2, 2, 8, 3, 1,10, 4, 1,12, 4, 4, 2, 3,65,12720,5040,48,9984,3840;\n
10, 0, 4, 12, 3, 0, 9, 3, 2,11,-1,-1,-1, 4, 4, 3, 1,65,12720,5040,48,9984,3840;\n
11, 0, 4, 12, 3, 1,10,-1,-1,-1,-1,-1,-1, 4, 4, 3, 2,65,12720,5040,48,9984,3840;\n
12, 0, 4, 12, 4, 0, 9, 4, 2,13,-1,-1,-1, 4, 4, 4, 1,65,12720,5040,48,9984,3840;\n
13, 0, 4, 12, 4, 1,12,-1,-1,-1,-1,-1,-1, 4, 4, 4, 2,65,12720,5040,48,9984,3840;\n
</CODE>


\image html bifurcation_config.png Figure 2:<td> A pictorial representation of the configuration file. That there are 5 Branches, 14 subdomains and three bifurcation points. Each vertical line segment represents a subdomain (each having P=6 and 2Q=8). The coordinates, for each subdomain, shown in this figure represent the global (abscissa) and the branch local (ordinate) index. Also notice that there is no global index of the left and right daughter of each set of bifurcating subdomains. This is because a bifurcation is considered a complete subdomain here, with three component (sub-sub-domains). Also noteworthy is the convention that while branching, if parent index is 0 then left daughter branch is 1 and right daughter branch is 2.</td> 

The main motivations of the configuration file and its conventions are as follows:
	- To use it as an input to make the topology known to the Couple Cells code so that the geometric layout and coupling between the subdomains and their resident cells can be established.
	- The configuration file also serves as concatonating subdomain specific file names to read in the coordinates and corresponding ATP concentrations. This is done by taking into account the branch index, and its local subdomain index. It is therefore also necessary for the Surface generating code to output the files in the same way in order to establish naming consistency. The global subdomain index is used to decipher the connectivity between the bifurcating subdomains. This is done in the function read_domain_info.

The coordinates in each subdomain file are written in top down manner (from u=1 to u=0 as shown in Figure 3). A set of input files listing the coordinates of each vertex of each mesh element in Figure 3 (which represents an MPI-task) are listed. Taking Figure 3 as an example, the input file for this subdomain will start with first four 3D points listed in the file representing the four verticies of MPI-task=0, then increasing in circumferential direction up to the four verticies of MPI-Task=11, and then moving in downward direction on longitudinal axis (u<1) until the last four points representing the verticies for MPI-task=47.
\image html cylinder.png Figure 3: <td> The subdomain (a cylinder resulting after the transformation using PDE modelling method) is shown and how it maps on to the a 2D u-v space. Each mesh element represents an MPI-task, having four verticies. 
*/
